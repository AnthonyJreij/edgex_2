apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mosquitto
  name: mosquitto
spec:
  selector:
    matchLabels:
      app: mosquitto
  template:
    metadata:
      labels:
        app: mosquitto
    spec: 
      hostname: mosquitto
      containers:
        - name: mosquitto
          image: docker.io/eclipse-mosquitto:1.6.2
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1883
              name: mosquitto-http
              protocol: TCP 
            - containerPort: 9001
              name: mosquitto-9001
              protocol: TCP         
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
---
apiVersion: v1
kind: Service
metadata:
  name: mosquitto
spec:
  ports:
    - port: 1883
      protocol: TCP
      name: mosquitto-http
      targetPort: 1883
      nodePort: 30183
    - port: 9001
      protocol: TCP
      name: mosquitto-9001
      targetPort: 9001
      nodePort: 30901
  selector:
    app: mosquitto
  type: LoadBalancer
apiVersion: v1
kind: PersistentVolume
metadata:
  name: influxdb
  labels:
    type: local
spec:
  storageClassName: influxpv
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  local:
    path: "/mnt"
  nodeAffinity:
    required: 
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - localhost
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: influxdb
  name: influxdb
spec:
  storageClassName: influxpv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: influxdb
  name: influxdb
spec:
  selector:
    matchLabels:
      app: influxdb
  template:
    metadata:
      labels:
        app: influxdb
    spec: 
      hostname: infuxdb
      containers:
        - name: influxdb
          image: docker.io/influxdb:1.8.4-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8086
              name: influx-http
              protocol: TCP          
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - mountPath: /var/lib/influx
              name: influx-pv
          env:
            - name: INFLUXDB_DB
              value: "sensordata"
            - name: INFLUXDB_USER 
              value: "user"
            - name: INFLUXDB_USER_PASSWORD
              value: "uspass"
            - name: INFLUXDB_ADMIN_USER
              value: "root"
            - name: INFLUXDB_ADMIN_PASSWORD
              value: "pass"
            - name: INFLUXDB_HTTP_AUTH_ENABLED
              value: "true"
      volumes:
        - name: influx-pv
          persistentVolumeClaim:
            claimName: influxdb
---
apiVersion: v1
kind: Service
metadata:
  name: influxdb
spec:
  ports:
    - port: 8086
      protocol: TCP
      targetPort: 8086
  selector:
    app: influxdb
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: messenger
  name: messenger
spec:
  selector:
    matchLabels:
      app: messenger
  template:
    metadata:
      labels:
        app: messenger
    spec: 
      hostname: messenger
      containers:
        - name: messenger
          image: xh125/messenger:0.6
          imagePullPolicy: Always
          env:
            - name: BROKER_ADDRESS
              value: "mosquitto"
            - name: BROKER_PORT
              value: "1883"
            - name: SUBSCRIBE_TOPIC
              value: "EdgeXEvents"
            - name: DB_HOST
              value: "influxdb"
            - name: DB_PORT
              value: "8086"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "pass"
            - name: DB_NAME
              value: "sensordata"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafanapv
  labels:
    type: local
spec:
  storageClassName: grafana
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  local:
    path: "/mnt"
  nodeAffinity:
    required: 
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - localhost
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  storageClassName: grafana
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
        - 0    
      containers:
        - name: grafana
          image: grafana/grafana:7.5.2
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1            
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - mountPath: /grafana
              name: grafana-pv
          env:
            - name: GF_INSTALL_PLUGINS
              value: redis-datasource
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: LoadBalancer